this.workbox=this.workbox||{},this.workbox.precaching=function(e,t,r,s,a,c,n,i){"use strict";function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(e[s]=r[s])}return e}).apply(this,arguments)}try{self["workbox:precaching:6.1.0"]&&_()}catch(e){}function h(e){if(!e)throw new r.WorkboxError("add-to-cache-list-unexpected-type",{entry:e});if("string"==typeof e){const t=new URL(e,location.href);return{cacheKey:t.href,url:t.href}}const{revision:t,url:s}=e;if(!s)throw new r.WorkboxError("add-to-cache-list-unexpected-type",{entry:e});if(!t){const e=new URL(s,location.href);return{cacheKey:e.href,url:e.href}}const a=new URL(s,location.href),c=new URL(s,location.href);return a.searchParams.set("__WB_REVISION__",t),{cacheKey:a.href,url:c.href}}class l{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:r})=>{if("install"===e.type){const e=t.originalRequest.url;r?this.notUpdatedURLs.push(e):this.updatedURLs.push(e)}return r}}}class u{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:e,params:t})=>{const r=t&&t.cacheKey||this.et.getCacheKeyForURL(e.url);return r?new Request(r):e},this.et=e}}class d extends c.Strategy{constructor(e={}){e.cacheName=t.cacheNames.getPrecacheName(e.cacheName),super(e),this.st=!1!==e.fallbackToNetwork,this.plugins.push(d.copyRedirectedCacheableResponsesPlugin)}async _handle(e,t){return await t.cacheMatch(e)||(t.event&&"install"===t.event.type?await this.nt(e,t):await this.it(e,t))}async it(e,t){let s;if(!this.st)throw new r.WorkboxError("missing-precache-entry",{cacheName:this.cacheName,url:e.url});return s=await t.fetch(e),s}async nt(e,t){this.ct();const s=await t.fetch(e);if(!(await t.cachePut(e,s.clone())))throw new r.WorkboxError("bad-precaching-response",{url:e.url,status:s.status});return s}ct(){let e=null,t=0;for(const[r,s]of this.plugins.entries())s!==d.copyRedirectedCacheableResponsesPlugin&&(s===d.defaultPrecacheCacheabilityPlugin&&(e=r),s.cacheWillUpdate&&t++);0===t?this.plugins.push(d.defaultPrecacheCacheabilityPlugin):t>1&&null!==e&&this.plugins.splice(e,1)}}d.defaultPrecacheCacheabilityPlugin={cacheWillUpdate:async({response:e})=>!e||e.status>=400?null:e},d.copyRedirectedCacheableResponsesPlugin={cacheWillUpdate:async({response:e})=>e.redirected?await a.copyResponse(e):e};class f{constructor({cacheName:e,plugins:r=[],fallbackToNetwork:s=!0}={}){this.rt=new Map,this.ot=new Map,this.at=new Map,this.ht=new d({cacheName:t.cacheNames.getPrecacheName(e),plugins:[...r,new u({precacheController:this})],fallbackToNetwork:s}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this.ht}precache(e){this.addToCacheList(e),this.lt||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this.lt=!0)}addToCacheList(e){const t=[];for(const s of e){"string"==typeof s?t.push(s):s&&void 0===s.revision&&t.push(s.url);const{cacheKey:e,url:a}=h(s),c="string"!=typeof s&&s.revision?"reload":"default";if(this.rt.has(a)&&this.rt.get(a)!==e)throw new r.WorkboxError("add-to-cache-list-conflicting-entries",{firstEntry:this.rt.get(a),secondEntry:e});if("string"!=typeof s&&s.integrity){if(this.at.has(e)&&this.at.get(e)!==s.integrity)throw new r.WorkboxError("add-to-cache-list-conflicting-integrities",{url:a});this.at.set(e,s.integrity)}if(this.rt.set(a,e),this.ot.set(a,c),t.length>0){const e=`Workbox is precaching URLs without revision info: ${t.join(", ")}\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;console.warn(e)}}}install(e){return s.waitUntil(e,(async()=>{const t=new l;this.strategy.plugins.push(t);for(const[a,c]of this.rt){const t=this.at.get(c),r=this.ot.get(a),s=new Request(a,{integrity:t,cache:r,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:c},request:s,event:e}))}const{updatedURLs:r,notUpdatedURLs:s}=t;return{updatedURLs:r,notUpdatedURLs:s}}))}activate(e){return s.waitUntil(e,(async()=>{const e=await self.caches.open(this.strategy.cacheName),t=await e.keys(),r=new Set(this.rt.values()),s=[];for(const a of t)r.has(a.url)||(await e.delete(a),s.push(a.url));return{deletedURLs:s}}))}getURLsToCacheKeys(){return this.rt}getCachedURLs(){return[...this.rt.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this.rt.get(t.href)}async matchPrecache(e){const t=e instanceof Request?e.url:e,r=this.getCacheKeyForURL(t);if(r)return(await self.caches.open(this.strategy.cacheName)).match(r)}createHandlerBoundToURL(e){const t=this.getCacheKeyForURL(e);if(!t)throw new r.WorkboxError("non-precached-url",{url:e});return r=>(r.request=new Request(e),r.params=o({cacheKey:t},r.params),this.strategy.handle(r))}}let p;const y=()=>(p||(p=new f),p);class g extends i.Route{constructor(e,t){super((({request:r})=>{const s=e.getURLsToCacheKeys();for(const e of function*(e,{ignoreURLParametersMatching:t=[/^utm_/,/^fbclid$/],directoryIndex:r="index.html",cleanURLs:s=!0,urlManipulation:a}={}){const c=new URL(e,location.href);c.hash="",yield c.href;const n=function(e,t=[]){for(const r of[...e.searchParams.keys()])t.some((e=>e.test(r)))&&e.searchParams.delete(r);return e}(c,t);if(yield n.href,r&&n.pathname.endsWith("/")){const e=new URL(n.href);e.pathname+=r,yield e.href}if(s){const e=new URL(n.href);e.pathname+=".html",yield e.href}if(a){const e=a({url:c});for(const t of e)yield t.href}}(r.url,t)){const t=s.get(e);if(t)return{cacheKey:t}}}),e.strategy)}}function w(e){const t=y(),r=new g(t,e);n.registerRoute(r)}function R(e){y().precache(e)}return e.PrecacheController=f,e.PrecacheFallbackPlugin=class{constructor({fallbackURL:e,precacheController:t}){this.handlerDidError=()=>this.et.matchPrecache(this.ut),this.ut=e,this.et=t||y()}},e.PrecacheRoute=g,e.PrecacheStrategy=d,e.addPlugins=function(e){y().strategy.plugins.push(...e)},e.addRoute=w,e.cleanupOutdatedCaches=function(){self.addEventListener("activate",(e=>{const r=t.cacheNames.getPrecacheName();e.waitUntil((async(e,t="-precache-")=>{const r=(await self.caches.keys()).filter((r=>r.includes(t)&&r.includes(self.registration.scope)&&r!==e));return await Promise.all(r.map((e=>self.caches.delete(e)))),r})(r).then((e=>{})))}))},e.createHandlerBoundToURL=function(e){return y().createHandlerBoundToURL(e)},e.getCacheKeyForURL=function(e){return y().getCacheKeyForURL(e)},e.matchPrecache=function(e){return y().matchPrecache(e)},e.precache=R,e.precacheAndRoute=function(e,t){R(e),w(t)},e}({},workbox.core._private,workbox.core._private,workbox.core._private,workbox.core,workbox.strategies,workbox.routing,workbox.routing);
//# sourceMappingURL=https://sm.pinimg.com/webapp/workbox-precaching.prod-c9d8c403a8a2d2df.js.map

this.workbox=this.workbox||{},this.workbox.strategies=function(t,e,r,s,a,n,o,i,c){"use strict";function h(){return(h=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(t[s]=r[s])}return t}).apply(this,arguments)}try{self["workbox:strategies:6.1.0"]&&_()}catch(t){}function l(t){return"string"==typeof t?new Request(t):t}class u{constructor(t,e){this.vt={},Object.assign(this,e),this.event=e.event,this.ht=t,this.bt=new o.Deferred,this._t=[],this.kt=[...t.plugins],this.xt=new Map;for(const r of this.kt)this.xt.set(r,{});this.event.waitUntil(this.bt.promise)}fetch(t){return this.waitUntil((async()=>{const{event:e}=this;let s=l(t);if("navigate"===s.mode&&e instanceof FetchEvent&&e.preloadResponse){const t=await e.preloadResponse;if(t)return t}const a=this.hasCallback("fetchDidFail")?s.clone():null;try{for(const t of this.iterateCallbacks("requestWillFetch"))s=await t({request:s.clone(),event:e})}catch(t){throw new r.WorkboxError("plugin-error-request-will-fetch",{thrownError:t})}const n=s.clone();try{let t;t=await fetch(s,"navigate"===s.mode?void 0:this.ht.fetchOptions);for(const r of this.iterateCallbacks("fetchDidSucceed"))t=await r({event:e,request:n,response:t});return t}catch(t){throw a&&await this.runCallbacks("fetchDidFail",{error:t,event:e,originalRequest:a.clone(),request:n.clone()}),t}})())}async fetchAndCachePut(t){const e=await this.fetch(t),r=e.clone();return this.waitUntil(this.cachePut(t,r)),e}cacheMatch(t){return this.waitUntil((async()=>{const e=l(t);let r;const{cacheName:s,matchOptions:a}=this.ht,n=await this.getCacheKey(e,"read"),o=h({},a,{cacheName:s});r=await caches.match(n,o);for(const t of this.iterateCallbacks("cachedResponseWillBeUsed"))r=await t({cacheName:s,matchOptions:a,cachedResponse:r,request:n,event:this.event})||void 0;return r})())}async cachePut(t,e){const s=l(t);await c.timeout(0);const o=await this.getCacheKey(s,"write");if(!e)throw new r.WorkboxError("cache-put-with-no-response",{url:a.getFriendlyURL(o.url)});const h=await this.Rt(e);if(!h)return!1;const{cacheName:u,matchOptions:w}=this.ht,p=await self.caches.open(u),f=this.hasCallback("cacheDidUpdate"),d=f?await n.cacheMatchIgnoreParams(p,o.clone(),["__WB_REVISION__"],w):null;try{await p.put(o,f?h.clone():h)}catch(t){throw"QuotaExceededError"===t.name&&await i.executeQuotaErrorCallbacks(),t}for(const r of this.iterateCallbacks("cacheDidUpdate"))await r({cacheName:u,oldResponse:d,newResponse:h.clone(),request:o,event:this.event});return!0}async getCacheKey(t,e){if(!this.vt[e]){let r=t;for(const t of this.iterateCallbacks("cacheKeyWillBeUsed"))r=l(await t({mode:e,request:r,event:this.event,params:this.params}));this.vt[e]=r}return this.vt[e]}hasCallback(t){for(const e of this.ht.plugins)if(t in e)return!0;return!1}async runCallbacks(t,e){for(const r of this.iterateCallbacks(t))await r(e)}*iterateCallbacks(t){for(const e of this.ht.plugins)if("function"==typeof e[t]){const r=this.xt.get(e),s=s=>{const a=h({},s,{state:r});return e[t](a)};yield s}}waitUntil(t){return this._t.push(t),t}async doneWaiting(){let t;for(;t=this._t.shift();)await t}destroy(){this.bt.resolve()}async Rt(t){let e=t,r=!1;for(const s of this.iterateCallbacks("cacheWillUpdate"))if(e=await s({request:this.request,response:e,event:this.event})||void 0,r=!0,!e)break;return r||e&&200!==e.status&&(e=void 0),e}}class w{constructor(t={}){this.cacheName=s.cacheNames.getRuntimeName(t.cacheName),this.plugins=t.plugins||[],this.fetchOptions=t.fetchOptions,this.matchOptions=t.matchOptions}handle(t){const[e]=this.handleAll(t);return e}handleAll(t){t instanceof FetchEvent&&(t={event:t,request:t.request});const e=t.event,r="string"==typeof t.request?new Request(t.request):t.request,s="params"in t?t.params:void 0,a=new u(this,{event:e,request:r,params:s}),n=this.Wt(a,r,e);return[n,this.Ut(n,a,r,e)]}async Wt(t,e,s){let a;await t.runCallbacks("handlerWillStart",{event:s,request:e});try{if(a=await this._handle(e,t),!a||"error"===a.type)throw new r.WorkboxError("no-response",{url:e.url})}catch(r){for(const o of t.iterateCallbacks("handlerDidError"))if(a=await o({error:r,event:s,request:e}),a)break;if(!a)throw r}for(const r of t.iterateCallbacks("handlerWillRespond"))a=await r({event:s,request:e,response:a});return a}async Ut(t,e,r,s){let a,n;try{a=await t}catch(n){}try{await e.runCallbacks("handlerDidRespond",{event:s,request:r,response:a}),await e.doneWaiting()}catch(t){n=t}if(await e.runCallbacks("handlerDidComplete",{event:s,request:r,response:a,error:n}),e.destroy(),n)throw n}}const p={cacheWillUpdate:async({response:t})=>200===t.status||0===t.status?t:null};return t.CacheFirst=class extends w{async _handle(t,e){let s,a=await e.cacheMatch(t);if(!a)try{a=await e.fetchAndCachePut(t)}catch(t){s=t}if(!a)throw new r.WorkboxError("no-response",{url:t.url,error:s});return a}},t.CacheOnly=class extends w{async _handle(t,e){const s=await e.cacheMatch(t);if(!s)throw new r.WorkboxError("no-response",{url:t.url});return s}},t.NetworkFirst=class extends w{constructor(t={}){super(t),this.plugins.some((t=>"cacheWillUpdate"in t))||this.plugins.unshift(p),this.Ct=t.networkTimeoutSeconds||0}async _handle(t,e){const s=[],a=[];let n;if(this.Ct){const{id:r,promise:o}=this.Dt({request:t,logs:s,handler:e});n=r,a.push(o)}const o=this.Et({timeoutId:n,request:t,logs:s,handler:e});a.push(o);for(const r of a)e.waitUntil(r);let i=await Promise.race(a);if(i||(i=await o),!i)throw new r.WorkboxError("no-response",{url:t.url});return i}Dt({request:t,logs:e,handler:r}){let s;return{promise:new Promise((e=>{s=setTimeout((async()=>{e(await r.cacheMatch(t))}),1e3*this.Ct)})),id:s}}async Et({timeoutId:t,request:e,logs:r,handler:s}){let a,n;try{n=await s.fetchAndCachePut(e)}catch(t){a=t}return t&&clearTimeout(t),!a&&n||(n=await s.cacheMatch(e)),n}},t.NetworkOnly=class extends w{constructor(t={}){super(t),this.Ct=t.networkTimeoutSeconds||0}async _handle(t,e){let s,a;try{const r=[e.fetch(t)];if(this.Ct){const t=c.timeout(1e3*this.Ct);r.push(t)}if(s=await Promise.race(r),!s)throw new Error("Timed out the network response after "+this.Ct+" seconds.")}catch(t){a=t}if(!s)throw new r.WorkboxError("no-response",{url:t.url,error:a});return s}},t.StaleWhileRevalidate=class extends w{constructor(t){super(t),this.plugins.some((t=>"cacheWillUpdate"in t))||this.plugins.unshift(p)}async _handle(t,e){const s=e.fetchAndCachePut(t).catch((()=>{}));let a,n=await e.cacheMatch(t);if(n);else try{n=await s}catch(t){a=t}if(!n)throw new r.WorkboxError("no-response",{url:t.url,error:a});return n}},t.Strategy=w,t.StrategyHandler=u,t}({},workbox.core._private,workbox.core._private,workbox.core._private,workbox.core._private,workbox.core._private,workbox.core._private,workbox.core._private,workbox.core._private);
//# sourceMappingURL=https://sm.pinimg.com/webapp/workbox-strategies.prod-fa8ffe3cde8c6c73.js.map